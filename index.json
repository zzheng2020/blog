[{"content":"This blog introduces my master\u0026rsquo;s thesis, which is available here and the demo video can be found below. Most of the sections correspond to paragraphs from the thesis, while some parts that are necessary in the thesis but not needed in the blog have been omitted. This allows you to focus more on the project itself.\nBackground In any infrastructure, be it clustered or otherwise, databases often face challenges with version changes, including upgrades and downgrades. Upgrades are straightforward, driven by the need to adopt new features or improvements. However, downgrades, especially in the telecommunications industry, present unique challenges. For example, in the Access and Mobility Management Function (AMF) as shown in the image below, when a database is upgraded and data is converted to a new version, complications may arise. According to ETSI MANO specifications, a rollback to the previous version may be required in such cases.\nAnother scenario is the \u0026ldquo;observation period\u0026rdquo; following an upgrade. For example, after upgrading a service from version A to version B, its performance is monitored. Key questions arise: Is the service functioning correctly? Is it handling the expected load? If the service underperforms, a rollback may be required, presenting the same challenges as in the first scenario. Both cases highlight the need for better support for database downgrades to mitigate service disruptions and maintain user experience.\n\u0026hellip;\n","permalink":"https://zzheng2020.github.io/post/masterthesis/","summary":"A Near-Zero Downtime Database Version Change Prototype","title":"Master Thesis: High Availability in Lifecycle Management of Cloud-Native Network Functions"}]